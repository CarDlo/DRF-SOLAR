"""
Django settings for principal project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta # import this library top of the settings.py file
from dotenv import load_dotenv
import os
import dj_database_url
# Load environment variables from .env file
#load_dotenv()

# Access environment variables
#SECRET_KEY = os.getenv('SECRET_KEY')


DEBUG = os.getenv('DEBUG')
DATABASE_TYPE = os.getenv('DATABASE_TYPE')
DATABASE_NAME = os.getenv('DATABASE_NAME')
DATABASE_USER = os.getenv('DATABASE_USER')
DATABASE_PASS = os.getenv('DATABASE_PASS')
DATABASE_HOST = os.getenv('DATABASE_HOST')
DATABASE_PORT = os.getenv('DATABASE_PORT')
RAILWAY_PROJECT_NAME = os.getenv('RAILWAY_PROJECT_NAME')


# Database URL
#DATABASE_URL = os.getenv('DATABASE_URL')

SECRET_KEY = 'django-insecure-ye@4^j!ro*8+*cjf&=9)172w*uak!_$#-_if63pgm^e=w=u%#6'
DATABASE_URL='postgresql://postgres:csnUArptScAVIsYTPcknoadnxXGThxzv@viaduct.proxy.rlwy.net:51580/railway'

# Diagnóstico para ver si Railway está leyendo las variables
print("CARDLO SECRET_KEY:", os.getenv('SECRET_KEY'))
print("CARDLO DATABASE_URL:", os.getenv('DATABASE_URL'))
print("RAILWAY_PROJECT_NAME:", os.getenv('RAILWAY_PROJECT_NAME'))


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!




# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost','web-production-79a9.up.railway.app','164.92.71.165']

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'whitenoise.runserver_nostatic',
    'rest_framework',
    'drf_spectacular',
    'plants',
    #'coreapi',
    'django_filters',
    'registros',
    'rest_framework_simplejwt',
    'corsheaders',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'principal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'principal.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Configuración de la base de datos según la variable de entorno
# if DATABASE_TYPE == 'postgresql':
#     DATABASES = {
#         'default': {
#             'ENGINE': 'django.db.backends.postgresql',
#             'NAME': os.getenv('DATABASE_NAME', 'mydatabase'),  # Nombre de la base de datos
#             'USER': os.getenv('DATABASE_USER', 'mydatabaseuser'),  # Usuario
#             'PASSWORD': os.getenv('DATABASE_PASS', 'mypassword'),  # Contraseña
#             'HOST': os.getenv('DATABASE_HOST', '127.0.0.1'),  # Host
#             'PORT': os.getenv('DATABASE_PORT', '5432'),  # Puerto
#         }
#     }
# else:
#     # Configuración por defecto (SQLite)
#     DATABASES = {
#         'default': {
#             'ENGINE': 'django.db.backends.sqlite3',
#             'NAME': BASE_DIR / 'db.sqlite3',
#         }
#     }


DATABASES = {
    'default': dj_database_url.config(default=DATABASE_URL)
}



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'es'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    #"DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",

    #SIMPLEJWT
    'DEFAULT_PERMISSION_CLASSES': (
        #'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        #'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),

    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        #'rest_framework.filters.OrderingFilter'  # Asegúrate de que esté habilitado aquí
    ],
    #'ORDERING_PARAM': 'ordering',

    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 2000,  # Número de registros por página
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=2),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7),
    'SLIDING_TOKEN_LIFETIME': timedelta(days=30),
    #'SLIDING_TOKEN_REFRESH_LIFETIME_LATE_USER': timedelta(days=1),
    #'SLIDING_TOKEN_LIFETIME_LATE_USER': timedelta(days=30),

        # Seguridad adicional
    'ROTATE_REFRESH_TOKENS': True,          # Regenerar el token de refresco al usarlo
    'BLACKLIST_AFTER_ROTATION': True,       # Invalidar el token anterior tras renovar
}

STORAGES = {
    # ...
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

CSRF_TRUSTED_ORIGINS = ['http://localhost', 'https://web-production-79a9.up.railway.app']

CORS_ALLOWED_ORIGINS = ['http://localhost', 'https://web-production-79a9.up.railway.app']
# Configuración para un panel más avanzado
# settings.py

